package demo.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import demo.beans.Employee;
import demo.dao.EmployeeDatabaseImplementation;
import demo.exceptions.EmployeeDuplicateEntryExistsException;
import demo.exceptions.EmployeeInvalidPasswordException;
import demo.exceptions.EmployeeInvalidRequestParameterException;
import demo.exceptions.EmployeeNotFoundException;
import demo.exceptions.EmployeeRequestOnNullObjectException;
import demo.util.EmployeeMessageManager;
import demo.util.EmployeeValidator;
import demo.util.EmployeeMessageManager.commonErrorLogs;
import demo.util.EmployeeMessageManager.employeeValidationResults;
import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service("service")
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class EmployeeServiceImplementation implements EmployeeServiceInterface {
	//object for the database class method calls
	@Autowired
	EmployeeDatabaseImplementation databaseImpl;	
	
	//returns a list of all employees in the database
	@Override
	public List<Employee> getAllEmployees() throws EmployeeNotFoundException{
		List<Employee> allEmployees = databaseImpl.getAllEmployees();
		if(allEmployees.isEmpty()) {	
			throw new EmployeeNotFoundException(EmployeeMessageManager.getVal("errorNoEmployeesFound"));
		}
		
		return allEmployees;
	}
	
	@Override
	public Employee newEmployee(Employee employee) 
			throws EmployeeRequestOnNullObjectException, 
			EmployeeInvalidRequestParameterException, 
			EmployeeDuplicateEntryExistsException {
		//validation step 1
		employeeValidationResults validationResult = 
				EmployeeValidator.validateIsThisEmployeeValid(Optional.ofNullable(employee));
		if(validationResult	!= employeeValidationResults.SUCCESS) {
			if(validationResult == employeeValidationResults.NULLARGUMENT) {
				log.debug(EmployeeMessageManager.getVal("errorCreatingInvalidEmployee"));
				throw new EmployeeRequestOnNullObjectException(validationResult.getMessage());
			}
			//the content type (employee) is fine, as is the formatting of the employee object
			//but the syntax of the field values is off somehow. 
			//hence the 422 error and not a 400 or 415 error.
			log.debug(EmployeeMessageManager.getVal("errorCreatingInvalidEmployee"));
			throw new EmployeeInvalidRequestParameterException(validationResult.getMessage());
		}
		
		//validation step 2
		if(databaseImpl.doesDuplicateExist(employee)) {
			log.debug(EmployeeMessageManager.getVal("errorCreatingEmployee"));
			throw new EmployeeDuplicateEntryExistsException(
					EmployeeMessageManager.getVal("errorDuplicateInsertion"));
		}

		return databaseImpl.addNewEmployee(employee);
	}

	@Override
	public Employee getEmployeeById(int eid) throws EmployeeNotFoundException {
		//checks if any employee with the given id is found in the database
		//validation step
		if(!EmployeeValidator.validateIsEmployeeIdInDatabase(databaseImpl, eid)) {	
			log.debug(commonErrorLogs.FINDINGERROREMPLOYEEIDNOTFOUND.getLogMessage());
			throw new EmployeeNotFoundException(commonErrorLogs.FINDINGERROREMPLOYEEIDNOTFOUND.getLogMessage());
		}
		
		Employee employee = databaseImpl.getEmployeeById(eid).get(0); //the list will only contain one employee
												//the single getter method doesn't work properly, so I use this
		
		log.info(EmployeeMessageManager.getVal("foundEmployee"));
		return employee; 
	}
	
	@Override
	public void deleteEmployee(int eid) throws EmployeeNotFoundException {
		//validation step
		if(!EmployeeValidator.validateIsEmployeeIdInDatabase(databaseImpl, eid))
		{
			log.debug(EmployeeMessageManager.getVal("errorDeletingEmployeeNotFound"));
			throw new EmployeeNotFoundException(EmployeeMessageManager.getVal("errorDeletingEmployeeNotFound"));
		}
		databaseImpl.deleteEmployee(eid);
	}
	
	@Override
	public List<Employee> getEmployeeByFirstName(String firstName) {
		return databaseImpl.getEmployeeByFirstName(firstName);
	}

	/*	The following five methods are methods to update specific employee 	*
	 *  info.																*
	 *  																	*	
	 *  By design, there is no method to update employee ID. That value is	*
	 *  the primary key, and is autogenerated. Allowing it to be modified	*
	 *  creates a risk of database conflcits.								*/
	
	@Override
	public Employee updateEmployeeFirstName(int eid, String fname) 
			throws EmployeeNotFoundException, EmployeeInvalidRequestParameterException {
		if(!EmployeeValidator.validateIsEmployeeIdInDatabase(databaseImpl, eid)) {
			log.debug(commonErrorLogs.UPDATINGERROREMPLOYEENOTFOUND.getLogMessage());
			throw new EmployeeNotFoundException(commonErrorLogs.UPDATINGERROREMPLOYEENOTFOUND.getLogMessage());
		}
		if(EmployeeValidator.containsNullOrNonAlphanumericValue(Optional.ofNullable(fname))) {
			log.debug(employeeValidationResults.INVALIDFIRSTNAME.getMessage());
			throw new EmployeeInvalidRequestParameterException(
					employeeValidationResults.INVALIDFIRSTNAME.getMessage());
		}
		return databaseImpl.updateEmployeeFirstName(eid, fname);
	}

	@Override
	public Employee updateEmployeeLastName(int eid, String lname) 
			throws EmployeeNotFoundException, EmployeeInvalidRequestParameterException {
		if(!EmployeeValidator.validateIsEmployeeIdInDatabase(databaseImpl, eid)) {
			log.debug(commonErrorLogs.UPDATINGERROREMPLOYEENOTFOUND.getLogMessage());
			throw new EmployeeNotFoundException(commonErrorLogs.UPDATINGERROREMPLOYEENOTFOUND.getLogMessage());
		}
		if(EmployeeValidator.containsNullOrNonAlphanumericValue(Optional.ofNullable(lname))) {
			log.debug(commonErrorLogs.UPDATINGERRORVALIDATIONFAILED.getLogMessage());
			throw new EmployeeInvalidRequestParameterException(
					employeeValidationResults.INVALIDLASTNAME.getMessage());
		}
		return databaseImpl.updateEmployeeLastName(eid, lname);
	}

	@Override
	public Employee updateEmployeePassWord(int eid, String pword1, String pword2) 
			throws EmployeeInvalidPasswordException, 
			EmployeeInvalidRequestParameterException, 
			EmployeeNotFoundException {
		//validation step 1
		if(!EmployeeValidator.validateIsEmployeeIdInDatabase(databaseImpl, eid)) {
			log.debug(commonErrorLogs.UPDATINGERROREMPLOYEENOTFOUND.getLogMessage());
			throw new EmployeeNotFoundException(commonErrorLogs.UPDATINGERROREMPLOYEENOTFOUND.getLogMessage());
		}
		
		//validation step 2
		if(!databaseImpl.getEmployeeById(eid).get(0).getPass_word().equals(pword1)) {
			log.debug(commonErrorLogs.UPDATINGERRORWRONGPASSWORD.getLogMessage());
			throw new EmployeeInvalidPasswordException(
					commonErrorLogs.UPDATINGERRORWRONGPASSWORD.getLogMessage());
		}
		
		//validation step 3
		if(EmployeeValidator.containsNullOrNonAlphanumericValue(Optional.ofNullable(pword2))) {
			log.debug(EmployeeMessageManager.getVal("errorUpdatingNewPasswordInvalid"));
			throw new EmployeeInvalidRequestParameterException(
					EmployeeMessageManager.getVal("errorUpdatingNewPasswordInvalid"));
		}
		return databaseImpl.updateEmployeePassWord(eid, pword1, pword2);
	}

	@Override
	public Employee updateEmployeeAge(int eid, int newage) 
			throws EmployeeNotFoundException, EmployeeInvalidRequestParameterException {
		
		//validation step 1
		if(!EmployeeValidator.validateIsEmployeeIdInDatabase(databaseImpl, eid)) {
			log.debug(commonErrorLogs.UPDATINGERROREMPLOYEENOTFOUND.getLogMessage());
			throw new EmployeeNotFoundException(commonErrorLogs.UPDATINGERROREMPLOYEENOTFOUND.getLogMessage());
		}
		
		//validation step 2
		if(EmployeeValidator.isTooYoung(newage)) {
			log.debug(commonErrorLogs.UPDATINGERRORVALIDATIONFAILED.getLogMessage());
			throw new EmployeeInvalidRequestParameterException(
					employeeValidationResults.INVALIDAGE.getMessage());
		}
		
		return databaseImpl.updateEmployeeAge(eid, newage);
	}

	@Override
	public Employee updateEmployeeDepartment(int eid, String department) 
			throws EmployeeNotFoundException, EmployeeInvalidRequestParameterException {
		
		//validation step 1
		if(!EmployeeValidator.validateIsEmployeeIdInDatabase(databaseImpl, eid)) {
			log.debug(commonErrorLogs.UPDATINGERROREMPLOYEENOTFOUND.getLogMessage());
			throw new EmployeeNotFoundException(commonErrorLogs.UPDATINGERROREMPLOYEENOTFOUND.getLogMessage());
		}
		
		//validation step 2
		if(EmployeeValidator.containsNullOrNonAlphanumericValue(Optional.ofNullable(department))) {
			log.debug(commonErrorLogs.UPDATINGERRORVALIDATIONFAILED.getLogMessage());
			throw new EmployeeInvalidRequestParameterException(
					employeeValidationResults.INVALIDDEPARTMENT.getMessage());
		}
		
		return databaseImpl.updateEmployeeDepartment(eid, department);
	}
	
}
